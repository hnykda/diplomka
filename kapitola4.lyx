#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\input{preamble}
\end_preamble
\use_default_options true
\master Main.lyx
\begin_modules
todonotes
theorems-ams
theorems-ams-extended
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "lmss" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\branch child3
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\branch child4
\selected 0
\filename_suffix 0
\color #002b36
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Results and simulations
\end_layout

\begin_layout Standard
The following chapter offers an in-depth analysis of a performance of the
 proposed algorithm.
 To guarantee a reproducible research, implementation details are mentioned
 to some degree and the code with the comparison is publicly available on
 
\family typewriter
https://github.com/hnykda/kfsims
\family default
.
 This thesis focused mostly on state prediction accuracy and less on the
 noise analysis, although it is mentioned when it helps to understand the
 mechanism behind the performance.
\end_layout

\begin_layout Standard
Please note that some figures should be compared against each other as a
 trend, rather then individual lines.
 This is true especially in the case of the multi-node variants, when the
 author's goal is to demonstrate that all the nodes are having some specific
 property which would be hard to demonstrate by plotting only a single node.
\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Standard
The implementation used in this work has been written in feature rich Python
 language ecosystem.
 Next to the CPython interpreter 3.6, following libraries (all licensed under
 MIT license) has been reused:
\end_layout

\begin_layout Itemize
scipy 1.0.0 – generator of random numbers from various distributions
\end_layout

\begin_layout Itemize
numpy 1.14.2 – arrays and mathematical operations, linear algebra
\end_layout

\begin_layout Itemize
networkx 2.1 – to create a network topology of measurement nodes
\end_layout

\begin_layout Itemize
jupyter 5.2.3 – 
\begin_inset Quotes eld
\end_inset

notebook
\begin_inset Quotes erd
\end_inset

 ecosystem for a rapid analysis
\end_layout

\begin_layout Itemize
filterpy 1.2.1 – reference implementation of a classic Kalman Filter
\end_layout

\begin_layout Itemize
matplotlib 2.2.2 – to create charts (including this thesis)
\end_layout

\begin_layout Standard
All the code is available on GitHub page 
\family typewriter
https://github.com/hnykda/kfsims
\family default
 including the instruction how to replicate the analysis and testing environment.
 Most of the functionality has been written from scratch by the author while
 having a reference implementation by the supervisor (plus the model of
 the testing trajectory).
 The code is structured into several parts, notably objects 
\family typewriter
MeasurementNode
\family default
 and 
\family typewriter
IWPrior
\family default
 plus many of utility functions in the appropriate modules such as 
\family typewriter
exponential_family.py
\family default
 or 
\family typewriter
network.py
\family default
, which are self-explanatory.
 
\end_layout

\begin_layout Subsubsection
Comparison
\end_layout

\begin_layout Standard
The notation for the components of the state vector is kept as 
\begin_inset Formula $x_{i}$
\end_inset

 in the charts.
 From the nature of the problem under study, it is clear that first two
 components which are observable behave in the similar way and the same
 is true for the latter two (which are not observable).
 To keep the analysis clean and concise, only a representative component
 is plotted if the behavior is significantly different.
\end_layout

\begin_layout Standard
The main metric used for comparison is root mean square error.
 Where appropriate, standard deviation of errors is listed.
 The result numbers discussed further are results of many iterations (more
 than 20) with different initial noise assigned to different nodes.
 It was although made sure that when comparing two different variants, same
 noise has been attributed to the appropriate elements.
 Finally, in situations when we are going to 
\emph on
visualize
\emph default
 matrices behavior, in our case matrices close to a matrix 
\begin_inset Formula $c\mathrm{I},c>0$
\end_inset

, a Frobenius matrix norm is used.
 
\end_layout

\begin_layout Section
Testing data
\end_layout

\begin_layout Standard
Here we describe the dynamical system model in the standard notation suitable
 for the Kalman Filter.
 The state transition matrix was of the form
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\renewcommand{\mat}[1]{\mathbf{\mathbf{#1}}}
{\mathbf{\mathbf{#1}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mat F=\begin{bmatrix}1 & 0 & t & 0\\
0 & 1 & 0 & t\\
0 & 0 & 1 & 0\\
0 & 0 & 0 & 1
\end{bmatrix},\mat Q=2\cdot\begin{bmatrix}\nicefrac{t^{3}}{3} & 0 & \nicefrac{t^{2}}{2} & 0\\
0 & \nicefrac{t^{3}}{3} & 0 & \nicefrac{t^{2}}{2}\\
\nicefrac{t^{2}}{2} & 0 & t & 0\\
0 & \nicefrac{t^{2}}{2} & 0 & t
\end{bmatrix},t=0.1
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mat H=\begin{bmatrix}1 & 0 & 0 & 0\\
0 & 1 & 0 & 0
\end{bmatrix},\mat R=0.25\cdot\begin{bmatrix}1 & 0\\
0 & 1
\end{bmatrix}
\]

\end_inset


\end_layout

\begin_layout Standard
A random trajectory was then simulated for all four components using this
 model with multivariate Gaussian random noise added to the each 
\begin_inset Quotes eld
\end_inset

true
\begin_inset Quotes erd
\end_inset

 datapoint (with covariance 
\begin_inset Formula $\mat Q$
\end_inset

) as well as to the observations (with covariance 
\begin_inset Formula $\mat R$
\end_inset

).
 It can be though about as a point moving on a 2D plane.
 A typical result of the first two components of the test trajectory can
 be seen on 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:trajectoryExample"
plural "false"
caps "false"
noprefix "false"

\end_inset

 while the other two on 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:trajectoryExample-3n4"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 We always generated 250 time steps.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/trajectory.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:trajectoryExample"

\end_inset

First and second component in the first row are observable, while the third
 and fourth is not.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/3and4th-state.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:trajectoryExample-3n4"

\end_inset

True third and fourth component of the state vector.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Noise
\end_layout

\begin_layout Standard
Different type of noises were tested to thoroughly examine the behavior
 of different filter under different circumstances.
 Examples for a static noise and variable noise can be found in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:noiseStatic"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:noiseSinus"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Even though only a single line is plotted, in the simulation both observable
 components distorted by the type of noise under study.
 Henceforth, for the sake of simplicity, MNCM was the factor we considered
 that can be slowly varying.
 In cases when the true covariance is unknown, the initial covariance was
 set to a base trajectory covariance 
\begin_inset Formula $\mat R$
\end_inset

, simulating an estimate one could obtain in the real application by other
 means.
\end_layout

\begin_layout Standard
It worth mentioning that because of the task's triviality, the CAVI algorithm
 usually converges in few iterations – less then 5.
 Therefore, number of iterations were set to conservative 10.
 There is an exhaustive analysis of algorithm stability and parameters effect
 in 
\begin_inset CommandInset citation
LatexCommand cite
key "Huang2018"
literal "false"

\end_inset

, where the reader is kindly referred to if she wishes to know more.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/static-noise.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:noiseStatic"

\end_inset

Multivariate Gaussian Random noise without variable variance.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/sinus-noise.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:noiseSinus"

\end_inset

A variable variance in the noise is simulated in this example.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Single node VBAKF
\begin_inset CommandInset label
LatexCommand label
name "subsec:Single-node-VBAKF"

\end_inset


\end_layout

\begin_layout Standard
In this section, we compare the VBAKF algorithm performance against the
 classic Kalman Filter (CKF).
 It is important to distinguish between the situation when the true noise
 covariance is known and when it is not.
 Another orthogonal property of the system is the variance of the noise
 covariance over time.
 Since the motivation of developing VBAKF is specially for the situations
 when the covariance is unknown or there is a risk of choosing a wrong one,
 it is clear where the VBAKF is expected to perform better.
\end_layout

\begin_layout Standard
When the true covariance is known and static – an unlikely situation in
 the real world systems – we do not expect any improvements in predictions
 over CKF.
 Actually, its performance may be degraded trying to adjust to the noise,
 making the overall accuracy score worse than CKF.
 In the case when the covariance is known and changing, then it depends
 on how is one able to tune the algorithm parameters (such as 
\begin_inset Formula $\rho$
\end_inset

 or 
\begin_inset Formula $\tau$
\end_inset

), how big the changes are and how precise is the known value.
 
\begin_inset Flex TODO Note (inline)
status collapsed

\begin_layout Plain Layout
dát do conclusion, že VBAKF si ani tehdy nevedl moc špatně
\end_layout

\end_inset

 Therefore, the main advantage is in the case when one do not know the true
 values or we do not know the initial estimate (or both), as is often the
 case in reality.
 It is the scenario where we expect VBAKF to surpass CKF, since if we are
 at least somewhat close to the initial estimate, it should 
\emph on
correct 
\emph default
to more precise values over time.
 Additionally, if the covariance is slowly changing, than VBAKF is able
 to adjust it as well.
\end_layout

\begin_layout Subsection
Static noise
\end_layout

\begin_layout Standard
As is clear from the 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:noise-static-x1-perf-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/bars-known-static-noise.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:noise-static-x1-perf-1"

\end_inset

As expected, there is no performance gain in prediction(right) nor standard
 deviation (right) using VBAKF in the simplest possible situation of a known
 static noise.
\end_layout

\end_inset


\end_layout

\end_inset

, the claim mentioned in the previous section is validated.
 The CKF variant is slightly outperforming VBAKF, although both variants
 are performing quite well.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:noise-static-x1-perf"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/perf-static-known-x1.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:noise-static-x1-perf"

\end_inset

Performance of both filters for 
\begin_inset Formula $x_{1}$
\end_inset

 together with measurements and the true trajectory.
\end_layout

\end_inset


\end_layout

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:noise-static-x3-perf"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/perf-static-known-x3.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:noise-static-x3-perf"

\end_inset

Performance of both filters for 
\begin_inset Formula $x_{3}$
\end_inset

 together with the true trajectory.
 This is purely estimated variable and not directly observed, hence the
 measurements are missing.
\end_layout

\end_inset


\end_layout

\end_inset

 allows for some introspection to the observed behavior.
 VBAKF algorithm seems to pay the price for being able more flexible than
 CKF and it is following noise peaks too much.
 This could be to some degree controlled by the 
\begin_inset Formula $\tau$
\end_inset

 hyperparameter, but not much without degrading performance in some other
 means, such as being to rigid, or coalesce with CKF.
 
\end_layout

\begin_layout Standard
Let also demonstrate the situation when the true covariance is not known
 and set to some reasonable estimate close to the true covariance.
 The remarkable property of being able to adjust to the true covariance
 has been confirmed, as can be seen from RMSE comparison in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:rmse-static-unknown-comp"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/bars-unknown-static-noise.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:rmse-static-unknown-comp"

\end_inset

Although the performance gain in prediction errors of the observed components
 is already high (~20%), the major difference is present in the unobserved
 ones, VBAKF giving over 2 times better results in terms of RMSE and 3 times
 better in terms of standard deviation.
\end_layout

\end_inset


\end_layout

\end_inset

, the performance is significantly better, specially in the unobserved component
s of the state vector.
 This is even more interesting when considering that the standard deviation
 of prediction error in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:rmse-static-unknown-comp"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is significantly lower for VBAKF than in CKF.
 This is the remarkable property of the proposed algorithm and figures for
 the first component in  
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:noise-static-x1-unknown-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/perf-static-unknown-x1.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:noise-static-x1-unknown-1"

\end_inset

First and second component in the first row are observable, while the third
 and fourth is not.
 
\end_layout

\end_inset


\end_layout

\end_inset

 and third component in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:noise-static-x3-unknown"
plural "false"
caps "false"
noprefix "false"

\end_inset

 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/perf-static-unknown-x3.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:noise-static-x3-unknown"

\end_inset

Estimated values of 
\begin_inset Formula $x_{3}$
\end_inset

 component by both algorithms and with true trajectory.
 
\end_layout

\end_inset


\end_layout

\end_inset

 only supports that.
 Both algorithms started with noise covariance estimate which was off, but
 VBAKF variant could adjust for it, placing less emphasis on the measurements
 and believing more to the prediction step.
 CKF algorithm just stays on the same level of reliance with correction.
\end_layout

\begin_layout Subsection
Variable noise
\end_layout

\begin_layout Standard
In this scenario, it is again considered that the value for true covariance
 is unknown and contrary to the previously discussed static case, it is
 slowly changing as is visualized on the 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:noiseSinus"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 From the performance evaluation perspective, the situation is analogous
 to the previous case when the noise covariance is not known.
 Based on the expectations from the theory and the previous results, there
 is no surprise that VBAKF is performing significantly better over CKF with
 details in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:rmse-static-unknown-comp-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/bars-unknown-variable-noise.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:rmse-static-unknown-comp-1"

\end_inset

Similarly to the unknown static noise case, VBAKF is clearly performing
 significantly better in terms of RMSE (left) with much less variance in
 the estimation error (right).
 Furthermore, this is exhibited over all components.
\end_layout

\end_inset


\end_layout

\end_inset

.
 As can be seen from trajectories on 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:noise-sinus-x1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/perf-static-sinus-x1.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:noise-sinus-x1"

\end_inset

First component estimates for both algorithms with observations, true values
 and also the noise amplitude.
 Notice how VBAKF is becoming more rigid during high noise peaks while still
 being flexible to catch up to the trajectory change.
\end_layout

\end_inset


\end_layout

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:noise-sinus-x3"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/perf-static-sinus-x3.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:noise-sinus-x3"

\end_inset

Third component estimates for both algorithms with observations, true values
 and also the noise amplitude.
 As in the case of 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:noise-sinus-x1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the VBAKF can control during very noisy intervals.
\end_layout

\end_inset


\end_layout

\end_inset

, VBAKF is again able to put less emphasis on the measurements during epochs
 of high noise, contrary to CKF being to sensitive in during these.
 
\end_layout

\begin_layout Standard
Finally, a very nice visualization of VBAKF capabilities can be seen on
 the graph 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:adaptation-of-single"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The adaptation of the noise covariance matrix to the true unknown covariance
 matrix is supporting the earlier findings of being able to account for
 noisy epochs.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/adaptation-of-r.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:adaptation-of-single"

\end_inset

Frobenius norms comparison of the VBAKF algorithm and covariance of moving
 window (size 20 steps to the future) of the noise.
 The diagonal values of 
\begin_inset Formula $\mat R$
\end_inset

 are increasing during noise peaks, while going down during low noise epochs.
 The scale in this chart is not important, it is the trend of the norms.
 Those should be ideally as close as possible.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Conclusion
\end_layout

\begin_layout Standard
The simulations shows that our single node VBAKF implementation is behaving
 as the theory predicts and in concordance with the reference source 
\begin_inset CommandInset citation
LatexCommand cite
key "Huang2018"
literal "false"

\end_inset

 where more emphasis on noise analysis were done.
 VBAKF does not perform better in case of a static noise when the covariance
 is known, merely just adding more computational time and possibly worse
 results trying to adjust to random fluctuations.
 It outperforms CKF in situations when the covariance of the noise is either
 unknown and, or, slowly changing.
 The performance of VBAKF was consistently better than CKF in these over
 many iterations and many variant of a noise.
 It is also worth mentioning that a very little tuning had to be done to
 get to these results.
 How much close the initial estimate must be to guarantee divergence is
 of course almost impossible to say in the real world cases, but in our
 testing case, even extreme initialization lead to quickly correcting the
 state (in less than 5 iterations).
 Such an extreme initialization were for example over three orders of magnitudes
 of the reality – a situation in which the CKF just does not provide any
 useful information.
 
\end_layout

\begin_layout Section
Distributed VBAKF
\end_layout

\begin_layout Standard
Based on the results from the previous chapter 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Single-node-VBAKF"
plural "false"
caps "false"
noprefix "false"

\end_inset

, only a slowly changing noise is going to be considered to not clutter
 the analysis of VBAKF with diffusion versus VBAKF without diffusion.
 As has been mentioned on the beginning of this whole chapter, the figures
 when plotting information from multiple nodes should be read as a general
 trend exhibited by the system.
 It would be a mistake try to interpret them line by line.
 
\end_layout

\begin_layout Subsection
Setting
\end_layout

\begin_layout Standard
Our network topology of nodes is for simplicity a 4-regular graph as is
 in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:network-top"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/network-top.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:network-top"

\end_inset

A network representing connection of different measurement nodes connected
 with the neighbors.
 The topology is a 4-regular graph.
\end_layout

\end_inset


\end_layout

\end_inset

.
 A slowly changing, different noise is attributed to the each node in the
 network (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:noise-diffusion"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/diffusion-noise.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:noise-diffusion"

\end_inset

Values of first and second component with noise from different nodes.
\end_layout

\end_inset


\end_layout

\end_inset

).
 When we compare diffused versus non-diffused variant, the noise attributed
 in the both runs was the same in corresponding nodes to make the results
 comparable and reproducible.
 The results are averaged over at least 100 iterations.
 
\end_layout

\begin_layout Subsection
Estimation performance
\end_layout

\begin_layout Standard
As expected, the estimation performance of the diffused variant is better
 than non-diffused variant.
 This is not only a result in the averaged results on the figure 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:mean-rmse-diffnodiff"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/rmse-std-diffnodiff.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:mean-rmse-diffnodiff"

\end_inset

Diffusion variant outperforms the non-diffused variant not just in Mean
 RMSE (the left figure), but also in Mean Standard deviation over all runs
 (the right figure).
\end_layout

\end_inset


\end_layout

\end_inset

, but it was consistent across literally all runs.
 To recapitulate – there was not a 
\emph on
single 
\emph default
run where would the non-diffused variant outperformed the diffused one in
 matter of Mean RMSE and standard deviation in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:mean-rmse-diffnodiff"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 There is a price in time execution, since the diffusion variant does an
 additional step – diffusing parameters – in each iteration.
 In our setting, this was almost negligible, taking only about 5% longer
 than the non-diffused variant.
 This time penalty would of course depend on the chosen diffusion strategy.
 
\end_layout

\begin_layout Subsection
Noise covariance analysis
\end_layout

\begin_layout Standard
The idea behind diffusion optimization is that the 
\emph on
averaging 
\emph default
over several nodes will eliminate extremes and smooths the estimation.
 This is clearly happening, as is clear from 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:single-node-R-prepost"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/compare-single-node-r-diff.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:single-node-R-prepost"

\end_inset

The diffusion algorithm smooths the trajectory for this single randomly
 chosen single node from the network, ignoring significant peaks which would
 otherwise led to inferior estimates.
 
\end_layout

\end_inset


\end_layout

\end_inset

, where we plot a Frobenius norm of the noise covariance matrix before and
 after diffusion step.
 Naturally, this phenomenon was exhibited on all nodes in the network, visualize
d in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:all-node-R-prepost"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/compare-mult-nodes-r-diff.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:all-node-R-prepost"

\end_inset

All nodes exhibit the behavior of smoothing out the noise covariance estimates,
 leading to the better results.
 
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Another view of this is presented in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:all-node-logR-nodiff"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/log-r-all-nodes-nodiff.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:all-node-logR-nodiff"

\end_inset

Nodes in non-diffusion variant do not exhibit any common pattern.
 There is also one of the nodes diverging quite significantly, considering
 the logarithmic scale.
 The diffusion variant do not exhibit such divergence.
\end_layout

\end_inset


\end_layout

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:all-node-logR-diff"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/log-r-all-nodes-diff.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:all-node-logR-diff"

\end_inset

Nodes in the diffusion variant are able to pick up the general noise trend
 and 
\begin_inset Quotes eld
\end_inset

agree
\begin_inset Quotes erd
\end_inset

 on it to some degree, even though it may not be the best estimate for the
 underlying nodes.
 
\end_layout

\end_inset


\end_layout

\end_inset

.
 While there is almost no or very little pattern in the non-diffused variant,
 the diffusion variant got a general trend.
 
\end_layout

\begin_layout Standard
It is also interesting to note that in our simulations, the diffused variance
 exhibit much less divergence cases, which can be explained by the fact
 that any extremes are much likely to be suppressed by neighbor nodes participat
ing in diffusion.
 An example can be seen on 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:all-node-R-prepost-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/charted/all-nodes-no-diff-x1.pdf
	lyxscale 70
	width 70line%
	groupId basic

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:all-node-R-prepost-1"

\end_inset

An example of diverging node present in the non-diffused variant.
 
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Conclusion
\end_layout

\begin_layout Standard
Indeed, the diffusion extension to the VBAKF algorithm clearly performs
 better than variant without diffusion in place.
 This is exhibited consistently over many iterations with different initializati
on noise.
 It is relatively robust to the parameter setting when sane defaults are
 used (see 
\begin_inset CommandInset citation
LatexCommand cite
key "Huang2018"
literal "false"

\end_inset

 for more information).
 
\end_layout

\begin_layout Standard
The disadvantages of the diffusion algorithm are mostly practical limitations
 of real life applications.
 
\end_layout

\begin_layout Standard
First of all, a communication must be established between the communicating
 nodes.
 The implementation of this communication may not be possible, nodes can
 be for example only connected to a master node or do not have ability to
 receive any information from the outer world, only to send one.
 Notwithstanding, this is not an intrinsic property of the method, but rather
 a common requirements for many diffusion and consensus approach.
 It is worth to mention that the algorithm does not rely on having all nodes
 participating in all time steps.
 As a matter of fact, the worst case scenario is a fallback to the default
 non-diffused variant when no nodes are communicating.
 This fact also facilitates the possible inclusion into an already existing
 solutions, since it can be implemented gradually, proceeding with the diffusion
 extension only when it is possible and a preliminary results shows effectivenes
s.
 
\end_layout

\begin_layout Standard
Secondly, there is additional implementation complexity, but as can be seen
 from the implementation, it is very easy to add the diffusion step into
 the existing algorithm.
 The diffusion strategy may be of course much more complex than it is in
 our case, but again, that is not an intrinsic property of the proposed
 algorithm but rather specific to the implementation.
 
\end_layout

\begin_layout Standard
In conclusion, when the node communication is not an issue, we believe that
 the proposed algorithm can be implemented for a very little price, while
 not performing worse than a traditional non-diffused variant.
\end_layout

\begin_layout Section
Future work
\end_layout

\begin_layout Standard
It is obvious that this work does not exhaust the topic in its entirety.
 To the best of the author's knowledge, there has been a little done in
 the field of combining parameter diffusion or consensus algorithms with
 variational Bayes methods.
 The key questions regarding the algorithm behavior, such as the numerical
 stability or convergence criteria remains unanswered, unfortunately.
 Additionally, we believe that it would be a beneficial contribution to
 the field, if at least following were studied:
\end_layout

\begin_layout Itemize
What role network's topology plays and how to design networks which are
 cheap, but still effective.
 
\end_layout

\begin_layout Itemize
Sensitiveness to different kind of noise or its evolution.
\end_layout

\begin_layout Itemize
What are the most effective diffusion strategies in this setting.
\end_layout

\begin_layout Itemize
Sensitiveness to different state models.
\end_layout

\begin_layout Standard
\begin_inset Branch child4
inverted 0
status collapsed

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Nemazat - je to potřeba abych viděl citace v \SpecialChar LyX

\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "library"
options "bibtotoc,plain"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
printbibliography
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
